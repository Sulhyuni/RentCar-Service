package com.ezenrent.rent.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import com.ezenrent.car.service.CarPosListServiceImpl;
import com.ezenrent.car.service.CarUpdateServiceImpl;
import com.ezenrent.car.service.CarViewServiceImpl;
import com.ezenrent.car.vo.CarVO;
import com.ezenrent.main.Execute;
import com.ezenrent.main.Main;
import com.ezenrent.rent.service.RentDeleteServiceImpl;
import com.ezenrent.rent.service.RentListServiceImpl;
import com.ezenrent.rent.service.RentSearchServiceImpl;
import com.ezenrent.rent.service.RentUpdateServiceImpl;
import com.ezenrent.rent.service.RentUpdateStatusServiceImpl;
import com.ezenrent.rent.service.RentViewServiceImpl;
import com.ezenrent.rent.service.RentWriteServiceImpl;
import com.ezenrent.rent.vo.RentVO;
import com.ezenrent.util.io.CarPrint;
import com.ezenrent.util.io.In;
import com.ezenrent.util.io.Out;
import com.ezenrent.util.io.RentPrint;

public class RentController {

	@SuppressWarnings({ "unchecked", "unused" })
	public void execute() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		// 무한루프
		while (true) {
			try {

				// 메뉴출력
				// MyView

				if (Main.login == null) {
					Out.line("=", 35);
					System.out.println(" 대여하기는 로그인 후 이용 가능합니다.");
					System.out.println(" 홈으로 이동합니다.");
					Out.line("=", 35);
					return;
				} else if (Main.login.getGradeNo() == 1) {
					Out.title("=", 15, "대여하기");
					System.out.println("\n1.대여리스트 2.상세내역 " + " 3.예약하기 4.예약수정,추가운전자 등록  5.반납&취소하기" + " 0.이전메뉴\n");
					Out.line("=", 41);
				} else if (Main.login.getGradeNo() == 9) {
					Out.title("*", 20, "대여관리");
					System.out.println("\n1.모든 회원 대여리스트 2.회원 대여 상세내역 3.회원 예약 취소");

				}

				// 메뉴입력/처리
				if (Main.login.getGradeNo() == 1) {
					switch (In.getString("메뉴 입력")) {
					case "1":
						// LIST
						RentVO vo = new RentVO();

						vo.setId(Main.login.getId());
						List<RentVO> list = (List<RentVO>) Execute.run(new RentListServiceImpl(), vo);
						RentPrint.print(list);
						System.out.println(" ■  대여 중인 차량 리스트를 불러옵니다.");

						break;
					case "2": // 상세내역
						RentVO viewVO = new RentVO();

						viewVO.setId(Main.login.getId());
						list = (List<RentVO>) Execute.run(new RentListServiceImpl(), viewVO);
						RentPrint.print(list);

						long no = Long.parseLong(In.getString(" ■ 상세보기 할 예약번호 입력"));
						viewVO.setRentNo(no);
						viewVO.setId(Main.login.getId());
						viewVO = (RentVO) Execute.run(new RentViewServiceImpl(), no);
						RentPrint.print(viewVO);

						if (list == null) {
							System.out.println("**대여 내역이 없습니다. 메인으로 이동합니다.**");
							return;
						}

						break;
					case "3":
						// 예약하기 write
						// 대여가능 리스트를 불러온다
						// 예약 후 carStatus가 '가능'->'불가' 로 변경되어야 한다.

						RentVO writeVO = new RentVO();
						CarVO carVO = new CarVO();

						// carStatus가 '가능'인 리스트만 불러온다.
						List<CarVO> posList = (List<CarVO>) Execute.run(new CarPosListServiceImpl(), null);
						CarPrint.print(posList);

						// carNo입력, 대여일자,반납일자
						no = Long.parseLong(In.getString("예약할 차량 선택"));
						carVO.setCarNo(no);
						carVO = (CarVO) Execute.run(new CarViewServiceImpl(), no);

						if (carVO == null || carVO.getCarStatus().equals("불가")) {
							System.out.println("**예약불가능한 차량번호이거나 잘못된 번호 입니다.**" + "\n ** 대여 '가능' 한 번호를 입력해주세요.**");

						} else {
							System.out.println(carVO);

							// 3-1 writeVO(writeVO)
							// 보험선택 1.만21세 2.만26세 /1.20만원 2.30만원 3.50만원 선택 후 db저장
							// *보험은 선택하는걸로 할지, 30만원 고정값 넣을지 추후 결정하기로 함.

							writeVO.setCarNo(no);
							writeVO.setId(Main.login.getId());
							System.out.println("\n+대여장소와 반납장소는 동일합니다.+");
							writeVO.setPlace(In.getString("대여장소"));
							// 대여시작일
							writeVO.setRentalDate(In.getString("대여시작일(yyyy-MM-dd) : "));
							// Date startDate = new SimpleDateFormat("yyyy-mm-dd").parse(rentalDate);
							// sdf.setLenient(false);
							// sdf.parse(writeVO.getRentalDate());
							// Out.error("*", 20, "잘못된 날짜 형식입니다");
							// 대여반납일
							writeVO.setReturnDate(In.getString("반납일(yyyy-MM-dd) : "));
							// Date endDate = new SimpleDateFormat("yyyy-mm-dd").parse(returnDate);
							// sdf.setLenient(false);
							// sdf.parse(writeVO.getReturnDate());
							// Out.error("*", 20, "잘못된 날짜 형식입니다");
							// String menu = In.getString();
							// writeVO.setInsurance(In.getString("보험선택 1.만21세이상 2.만26세이상"));

							// 보험선택

							// long totalFee = vo.getCarPrice() *
							// writeVO.setTotalFee(totalFee);
							System.out.println("총 렌트료 : DM 문의");// + totalFee);
							Integer result = (Integer) Execute.run(new RentWriteServiceImpl(), writeVO);
//						writeVO= (RentVO) Execute.run(new RentWriteServiceImpl(), writeVO);	

							carVO.setCarStatus("불가");
							Execute.run(new CarUpdateServiceImpl(), carVO);

							// return totalFee;
							Out.line("=", 41);
							System.out.println("예약되었습니다.");

						}

						// totalFee = carPrice * 대여일수(대여시작일-대여종료일) +insurance(1.or2.)
//					System.out.println("예약하시겠습니까?  1.예 2.이전메뉴");		

						// 예약하면 rentNo생성된다.
//					switch (In.getString("메뉴입력")) {
//					case "1":
////						System.out.println("아래 정보로 예약되었습니다.");
////						viewVO=(RentVO) Execute.run(new RentViewServiceImpl(), writeVO.getRentNo());
////						RentPrint.print(viewVO);
//						break;
//					case "2":
//						System.out.println("이전메뉴로 돌아갑니다.");
//
//						return;
//
//					default:
//						break;
//					}
//					Out.line("=", 41);
//
//					Execute.run(new RentWriteServiceImpl(), writeVO);

						break;

					case "4":
						// 예약수정,추가운전자등록 update
						// 대여일,반납일수정, 추가운전자등록
						// 추가운전자(이름,생년월일, 면허번호 )정보 입력
						viewVO = new RentVO();
						viewVO.setId(Main.login.getId());
						list = (List<RentVO>) Execute.run(new RentListServiceImpl(), viewVO);
						RentPrint.print(list);
						if (list == null)
							return;

						no = Long.parseLong(In.getString("수정할 예약번호"));
						RentVO updateVO = (RentVO) Execute.run(new RentViewServiceImpl(), no);
						RentPrint.print(updateVO);

						if (updateVO == null) {
							Out.error("*", 20, "예약번호 다시 확인해주세요.");
						} else {
							updateVO(updateVO);
							updateVO.setRentNo(no);
							Execute.run(new RentUpdateServiceImpl(), updateVO);
							// 수정할 글 항목번호입력3

							// rentNo
							// RentPrint.print(updateVO);
//					if (!Main.login.getId().equals(updateVO.getId())) {
//						Out.error("*", 20, "본인글만 수정 가능합니다.");
//
//					} else
//						
							// 회원이 수정한 데이터를 가져온다
							// 대여일,반납일수정, 추가운전자등록(이름,생년월일,면허번호)

//					}
						}
						break;

					case "5":
						// 예약 취소
						vo = new RentVO();
						vo.setId(Main.login.getId());
						list = (List<RentVO>) Execute.run(new RentListServiceImpl(), vo);
						RentPrint.print(list);
						System.out.println(" ■  대여 중인 차량 리스트를 불러옵니다.");
						if (list == null) {
							System.out.println("**대여 내역이 없습니다. 메인으로 이동합니다.**");
							return;
						}


						// 취소,반납시 rentNo 삭제처리 carStatus가 '가능'으로 변경하도록 한다.
						// 취소,반납 할 회원 대여리스트의 rentNo 입력
						RentVO deleteVO = new RentVO();
						long no1 = Long.parseLong(In.getString("취소 할 예약번호"));
						deleteVO.setId(Main.login.getId());
						deleteVO.setRentNo(no1);
						Integer result = (Integer) Execute.run(new RentDeleteServiceImpl(), deleteVO);

						if (result == 0) {
							Out.error("*", 20, "예약번호가 잘못되었습니다. \n 예약번호를 다시 확인해주세요");

						} else {
							long no2 = Long.parseLong(In.getString("취소 할 차량번호"));
							deleteVO.setId(Main.login.getId());
							deleteVO.setCarNo(no2);
							deleteVO.setCarStatus("가능");
							Execute.run(new RentUpdateStatusServiceImpl(), deleteVO);
//						
							System.out.println("**정상적으로 예약이 취소 되었습니다.**");
						}
 
//			

						break;

					case "0":
						// 이전메뉴
						System.out.println("이전메뉴로 돌아갑니다.");

						return;

					default:
						System.out.println("잘못된 메뉴 입력");
						System.out.println("다시 입력 해주세요.");
						break;

					}// end of switch
				} // end of if

				else if (Main.login.getGradeNo() == 9) {

					switch (In.getString("메뉴 입력")) {
					case "1":
						// LIST
						RentVO vo = new RentVO();
						List<RentVO> list = (List<RentVO>) Execute.run(new RentListServiceImpl(), vo);
						RentPrint.print(list);
						System.out.println(" ■  모든회원 대여리스트를 불러옵니다.");

						break;
					case "2": // 상세내역
						//id 검색. 개발중
						RentVO viewVO = new RentVO();
						// 회원의 대여 상세내역을 확인 할 수 있다.
						long no = Long.parseLong(In.getString(" ■ 상세보기 할 예약번호 입력"));
						viewVO.setRentNo(no);
						viewVO = (RentVO) Execute.run(new RentViewServiceImpl(), no);
						RentPrint.print(viewVO);

						if (viewVO == null)
							System.out.println("**대여 내역이 없습니다. 메인으로 이동합니다.**");
						break;

					case "3":
						//상태수정
						System.out.println("개발중입니다.");
					
						
//			

						break;
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			} // end of try~catch

		} // end of while
	}// end of execute

	// 4-1 수정항목
	private void updateVO(RentVO vo) {
		while (true) {
			try {
				// SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

				System.out.println("1.대여일 2.반납일 3.운전자 등록 4.완료 0.이전메뉴");
				switch (In.getString("수정 항목 입력")) {
				case "1":
					vo.setRentalDate(In.getString("대여일(yyyy-MM-dd) :"));
//					sdf.setLenient(false);
//					sdf.parse(vo.getRentalDate());
					break;
				case "2":
					// int i = 0;
					// for(i=0;
					vo.setReturnDate(In.getString("반납일(yyyy-MM-dd) :"));
//					sdf.setLenient(false);
//					sdf.parse(vo.getReturnDate());
					break;
				case "3":
					vo.setAddDriver(In.getString("이름"));
					vo.setAddBirth(In.getString("생년월일"));
					vo.setAddLicense(In.getString("면허번호"));

					break;
				case "4":
					vo.setId(Main.login.getId());
					System.out.println("수정완료 되었습니다.");

					return;
				case "0":

					System.out.println("수정 취소.이전메뉴");

					return;

				default:
					Out.error("=", 20, "잘못입력했습니다.");
					break;
				}
			} catch (Exception e) {
				Out.error("*", 20, "입력값을 다시 확인해주세요");
				e.printStackTrace();
			}

		} // end of while

	}// end of update vo

	private void insuranceVO(RentVO vo) throws Exception {
		while (true) {
			String insuranceOlder = "10000";
			String insuranceYounger = "30000";
			RentVO insuranceVO = new RentVO();
			try {
				System.out.println("1.만21세이상-30만원  2.만26세이상-30만원");
				switch (In.getString("보험선택")) {
				case "1":
					// 21세
					System.out.println("운전자 만21세 이상/ 자기 면책금 30만원");
					insuranceVO.setInsurance(insuranceYounger);
					return;
				case "2":
					// 26세
					System.out.println("운전자 만26세 이상/ 자기 면책금 30만원");
					insuranceVO.setInsurance(insuranceOlder);
					return;

				default:
					Out.error("=", 20, "잘못입력했습니다.");
					break;
				}

			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("보험 계산시 오류발생");
			}
		} // end ofwhile
	}// end of insuranceVO
//	public void calculate() {
//		RentVO rentVO = new RentVO();
//		Long totalFee = rental(rentVO.getRentalDate(),rentVO.getReturnDate(),
//				rentVO.getCarPrice(),rentVO.getInsurance());
//		System.out.println(" 총 렌탈 비 : " + totalFee);
//	}

	public static long rental(String rentalDate, String returnDate, 
			long carPrice, long insurance) throws Exception {

		Date startDate = new SimpleDateFormat("yyyy-mm-dd").parse(rentalDate);
		Date endDate = new SimpleDateFormat("yyyy-mm-dd").parse(returnDate);
		

		long diffsec = (endDate.getTime() - startDate.getTime()) / 1000;
		long diffDay = diffsec / (24 * 60 * 60);

		// 총 렌트료 = 하루렌탈료 * 예약일수 + 보험료
		long totalFee = (carPrice * diffDay) + insurance;

//		System.out.println("예약일수 : " + diffDay + "일");
//		System.out.println("하루렌트료 : " + carPrice + "dnjs");
//		System.out.println("보험료 : " + insurance + "원");

		return totalFee;

	}//end of exception

}// end of class
