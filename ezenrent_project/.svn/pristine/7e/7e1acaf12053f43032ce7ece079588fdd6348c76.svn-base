package com.ezenrent.member.controller;

import com.ezenrent.main.Execute;
import com.ezenrent.main.Main;
import com.ezenrent.member.service.MemberFindIdServiceImpl;
import com.ezenrent.member.service.MemberFindPwServiceImpl;
import com.ezenrent.member.service.MemberIdListServiceImpl;
import com.ezenrent.member.service.MemberLoginServiceImpl;
import com.ezenrent.member.service.MemberUpdatePwServiceImpl;
import com.ezenrent.member.service.MemberUpdateServiceImpl;
import com.ezenrent.member.service.MemberViewPwServiceImpl;
import com.ezenrent.member.service.MemberViewServiceImpl;
import com.ezenrent.member.service.MemberWakeUpServiceImpl;
import com.ezenrent.member.service.MemberWriteServiceImpl;
import com.ezenrent.member.vo.LoginVO;
import com.ezenrent.member.vo.MemberVO;
import com.ezenrent.rent.service.RentMyViewServiceImpl;
import com.ezenrent.rent.vo.RentVO;
import com.ezenrent.util.io.In;
import com.ezenrent.util.io.MemberPrint;
import com.ezenrent.util.io.Out;
import com.ezenrent.util.io.RentPrint;

public class LoginController {
	public void execute() {
		while (true) {
			try {
				// 비회원일 때 나오는 My메뉴
				if (Main.login == null) {
					Out.title("=", 18, "My 메뉴");
					System.out.println(" 1.로그인 2.회원가입 3.아이디찾기 4.비밀번호찾기 0.이전메뉴");
					Out.line("=", 48);
				// 회원 또는 관리자일 때 My메뉴 - 회원은 본인의 대여내역을 볼 수 있고 회원탈퇴도 할 수 있다.
				} else if (Main.login != null) {
					Out.title("=", 19, "My 메뉴");
					System.out.println(" 1.로그아웃 2.내정보보기 3.내정보변경 4.비밀번호변경 "
							+ ((Main.login.getGradeNo() == 1) ? "\n 5.대여내역 6.회원탈퇴 " : "") + "0.이전메뉴");
					Out.line("=", 50);

				}
// 비회원 My메뉴
				r : if (Main.login == null) {
					switch (In.getString(" ■ 원하시는 항목의 번호를 선택 해 주세요.")) {
					case "1": // 로그인
						LoginVO vo = new LoginVO();
						System.out.println();
						vo.setId(In.getString("아이디"));
						vo.setPw(In.getString("비밀번호"));
						LoginVO loginVO = (LoginVO) Execute.run(new MemberLoginServiceImpl(), vo);
						if (loginVO == null) {
							System.out.println("\n ✖ 입력하신 정보가 없습니다.");
							System.out.println(" ✖ 아이디나 비밀번호를 다시 확인 해주시길 바랍니다.");
							System.out.println(" ✖ 비밀번호는 대소문자를 구분하여 입력 바랍니다.");
						} else if (loginVO.getStatus().equals("강퇴")) {
							System.out.println("\n ✖ 관리자에 의해 접근이 제한된 회원으로 로그인 할 수 없습니다.");
							System.out.println(" ✖ 로그인을 원하시면 admin@naver.com 으로 문의 바랍니다.");
						} else if (loginVO.getStatus().equals("탈퇴")) {
							System.out.println("\n ✖ 탈퇴한 회원으로 로그인 할 수 없습니다.");
							System.out.println(" ✖ 로그인을 원하시면 회원가입 후 이용 바랍니다.");
						} else if (loginVO.getStatus().equals("휴면")) {
							System.out.println("\n ✖ 장기간 미접속으로 인해 휴면계정으로 전환된 회원입니다.");
							System.out.println(" ✖ 로그인을 원하시면 가입시 입력 한 정보를 입력 해 주세요.");
							MemberVO wakeUpVO = new MemberVO();
							wakeUpVO.setId(In.getString(" ■ 아이디"));
							wakeUpVO.setName(In.getString(" ■ 이름"));
							wakeUpVO.setPw(In.getString(" ■ 비밀번호"));
							wakeUpVO = (MemberVO) Execute.run(new MemberViewServiceImpl(), wakeUpVO.getId());
							int result = (int) Execute.run(new MemberWakeUpServiceImpl(), wakeUpVO);
							if (result == 1) {
								System.out.println("\n ■ 휴면 해제 되었습니다. 다시 로그인 해 주세요.");
							} else {
								System.out.println("\n ✖ 휴면 해제가 되지 않았습니다. 입력 정보를 다시 한 번 확인 해 주세요.");
							}
						} else {
							Main.login = loginVO;
							System.out.println("\n  ■ " + loginVO.getName() + "님! 환영합니다.");
							System.out.println("  ■ " + loginVO.getGradeName() + " 권한으로 로그인 되었습니다.");
							return;
						}
						break;
					case "2": // 회원가입
						MemberVO writeVO = writeJoin();
						if (writeVO == null) {
							System.out.println("\n ✖ 회원가입이 취소되었습니다.");
							break;
						} else if ((Integer) Execute.run(new MemberWriteServiceImpl(), writeVO) == 1) {
							System.out.println("\n ■ " + writeVO.getId() + "님, 환영합니다! 로그인 후 이용 해 주세요.");
						}
						break;
					case "3": // 아이디찾기
						LoginVO findIdVO = new LoginVO();
						System.out.println("\n ■ 가입 시 입력한 정보로 아이디를 찾을 수 있습니다.\n");
						String name = In.getString(" ✔ 이름");
						findIdVO.setName(name);
						findIdVO.setEmail(In.getString(" ✔ 이메일"));
						findIdVO = (LoginVO) Execute.run(new MemberFindIdServiceImpl(), findIdVO);
						if (findIdVO == null) {
							System.out.println("\n ✖ 입력하신 정보와 일치하는 회원이 없습니다.");
							System.out.println(" ✖ 입력 정보를 다시 한 번 확인하여 주세요.");
							break r;
						} else {
							System.out.println();
							Out.line("=", 32);
							System.out.println(" ✔ " + name + "님의 아이디는 [" + findIdVO.getId() + "] 입니다.");
							Out.line("=", 32);
							break;
						}
					case "4": // 비밀번호 찾기
						MemberVO findPwVO = new MemberVO();
						System.out.println("\n ■ 가입 시 입력한 정보로 비밀번호를 찾을 수 있습니다.\n");
						String id = In.getString(" ✔ 아이디");
						name = In.getString(" ✔ 이름");
						String email = In.getString(" ✔ 이메일");
						findPwVO.setId(id);
						findPwVO.setName(name);
						findPwVO.setEmail(email);
						findPwVO = (MemberVO) Execute.run(new MemberFindPwServiceImpl(), findPwVO);
						if (findPwVO == null) {
							System.out.println("\n ✖ 입력하신 정보와 일치하는 회원이 없습니다.");
							System.out.println(" ✖ 입력 정보를 다시 한 번 확인하여 주세요.");
							break r;
						} else {
							findPwVO.setId(id);
							findPwVO.setPw(ConditionCheck.randomPw());
							Execute.run(new MemberUpdatePwServiceImpl(), findPwVO);
							System.out.println();
							Out.line("=", 38);
							System.out.println(" ✔ "+ name +"님, 임시 비밀번호가 발급 되었습니다.");
							System.out.println(" ✔ 로그인 후 비밀번호를 변경하시길 바랍니다.");
							System.out.println(" ✔ 임시 비밀번호 [ " + findPwVO.getPw() + " ]");
							Out.line("=", 38);
							break;
						}
					case "0": // 이전메뉴
						return;
					default:
						System.out.println("\n ✖ 잘못 입력 하셨습니다.");
						System.out.println(" ✖ 1~4번, 0번중에 선택 해 주세요. ");
					} // end of switch

// 일반회원 My메뉴
				} else if (Main.login != null) {
					switch (In.getString(" ■ 원하시는 항목의 번호를 선택 해 주세요")) {
					case "1": // 로그아웃
						Main.login = null;
						System.out.println("\n ✔ 로그아웃 되었습니다.");
						break;
					case "2": // 내정보보기 - id:test
						MemberVO viewVO = new MemberVO();
						String str = Main.login.getId(); // str = test;
						viewVO.setId(str);
						viewVO = (MemberVO) Execute.run(new MemberViewServiceImpl(), str);
						MemberPrint.print(viewVO);
						break;
					case "3": // 내정보수정
						MemberVO updateVO = new MemberVO();
						str = Main.login.getId();
						updateVO = (MemberVO) Execute.run(new MemberViewServiceImpl(), str);
						MemberPrint.print(updateVO);
						(new MemberController()).updateInfo(updateVO);
						break;
					case "4": // 비밀번호 변경
						MemberVO updatePwVO = new MemberVO();
						String id = Main.login.getId();
						updatePwVO = (MemberVO) Execute.run(new MemberViewPwServiceImpl(), id);
						System.out.println("\n ■ 비밀번호를 변경하시려면 기존 비밀번호를 입력 해 주세요.");
						String inPw = In.getString(" ✔ 기존 비밀번호");
						if (inPw.equals(updatePwVO.getPw())) {
							while (true) {
								String newPw = In.getString(" ✔ 새로운 비밀번호");
								if (ConditionCheck.checkPw(newPw) == false) {
									System.out.println(" ✖ 아래의 입력 조건을 확인하고 다시 입력 해 주세요.");
									System.out.println(" ✔ 입력 조건 : 10~20자, 영문 & 숫자 & 특수문자 모두 포함");
									System.out.println(" ✔ 사용 가능한 특수문자 : ~!@^*-_.,? \n");
								} else {
									updatePwVO.setId(id);
									updatePwVO.setPw(newPw);
									int result = (int) Execute.run(new MemberUpdatePwServiceImpl(), updatePwVO);
									if (result == 1) {
										System.out.println("\n ✔ 비밀번호가 변경 되었습니다.");
										break;
									} else {
										System.out.println("\n ✖ 비밀번호가 변경되지 않았습니다. 다시 시도 해 주세요.");
										break;
									}
								}
							} // end of while
						} else {
							System.out.println("\n ✖ 비밀번호를 다시 한 번 확인 해 주세요.");

						}
						break;
					case "0": // 이전메뉴
						return;
					case "5": // 대여내역
						if (Main.login.getGradeNo() == 1) {
							RentVO rentVO = new RentVO();
							rentVO = (RentVO) Execute.run(new RentMyViewServiceImpl(), Main.login.getId());
							RentPrint.print(rentVO);
							break;
						}
					case "6": // 회원탈퇴
						if (Main.login.getGradeNo() == 1) {
							MemberVO resignVO = new MemberVO();
							id = Main.login.getId();
							inPw = In.getString("\n ■ 탈퇴를 원하시면 비밀번호를 입력 해 주세요.");
							resignVO = (MemberVO) Execute.run(new MemberViewPwServiceImpl(), id);
							if (inPw.equals(resignVO.getPw())) {
								resignVO = (MemberVO) Execute.run(new MemberViewServiceImpl(), id);
								resignVO.setStatus("탈퇴");
								Execute.run(new MemberUpdateServiceImpl(), resignVO);
								System.out.println("\n ✔ 정상적으로 탈퇴가 되었습니다. 로그아웃 합니다.");
								Main.login = null;
								return;
							} else {
								System.out.println("\n ✖ 탈퇴가 되지 않았습니다. 비밀번호를 확인 해 주세요.");
							}
							break;
						}
					default:
						System.out.println("\n ✖ 잘못 입력 하셨습니다.     ");
						System.out
								.println(" ✖ 1~" + ((Main.login.getGradeNo() == 9) ? "4" : "6") + "번, 0번중에 선택 해 주세요. ");
					} // end of switch
				}
			} catch (Exception e) {
				e.printStackTrace();
				Out.error("=", 50,
						"예기치 못한 오류가 발생하였습니다. 다시 한 번 시도해 주세요. " + "\n ✖ 오류가 지속될 시 admin@naver.com으로 연락 바랍니다.");
			} // end of try~catch
		} // end of while
	} // end of execute

	public MemberVO writeJoin() throws Exception {
		Out.title("=", 18, "회원가입");
		System.out.println(" ■ 가입 항목을 형식에 맞게 작성 해 주세요.");
		System.out.println(" ■ ✔ 표시는 필수 입력 사항이며, 나머지는 선택 사항 입니다.");
		Out.line("=", 48);
		MemberVO vo = new MemberVO();
		while (true) {
			String id = In.getString(" ✔ 아이디");
			if ((boolean) (Execute.run(new MemberIdListServiceImpl(), id))) {
				System.out.println("\n ✖ 이미 사용중인 아이디 입니다. 다시 입력 해 주세요.\n");
			} else if (!ConditionCheck.checkId(id)) {
				System.out.println(" ✖ 입력 조건을 확인하고 다시 입력 해 주세요.");
				System.out.println(" ✔ 입력 조건 : 4~20자, 첫글자는 영문 대소문자, 영문 & 숫자만 입력 가능.\n");
			} else {
				vo.setId(id);
				break;
			}
		}
		while (true) {
			String pw = In.getString(" ✔ 비밀번호");
			if (ConditionCheck.checkPw(pw) == false) {
				System.out.println(" ✖ 아래의 입력 조건을 확인하고 다시 입력 해 주세요.");
				System.out.println(" ✔ 입력 조건 : 10~20자, 영문 & 숫자 & 특수문자 모두 포함");
				System.out.println(" ✔ 사용 가능한 특수문자 : ~!@^*-_.,? \n");
			} else {
				vo.setPw(pw);
				break;
			}
		}
		while (true) {
			String name = In.getString(" ✔ 이름");
			if (ConditionCheck.checkName(name) == false) {
				System.out.println(" ✖ 아래의 입력 조건을 확인하고 다시 입력 해 주세요.");
				System.out.println(" ✔ 입력 조건 : 2~10자, 한글 또는 영문만 가능\n");
			} else {
				vo.setName(name);
				break;
			}
		}
		while (true) {
			String birth = In.getString(" ✔ 생년월일 (yyyy-mm-dd)");
			try {
				if (ConditionCheck.checkBirth(birth) == false) {
					System.out.println("\n ✖ 날짜 형식이 맞지 않습니다. 아래와 같이 입력 해 주세요.");
					System.out.println(" ✔ 예) 1991-01-01 ('-'을 포함하여 입력)\n");
				} else if (ConditionCheck.getAge(birth) < 20) {
					System.out.println("\n ✖ 19세 미만의 미성년자는 가입 하실 수 없습니다.\n");
				} else {
					vo.setBirth(birth);
					break;
				}
			} catch (Exception e) {
				System.out.println("\n ✖ 날짜 형식이 맞지 않습니다. 아래와 같이 입력 해 주세요.");
				System.out.println(" ✔ 예) 1991-01-01 ('-'을 포함하여 입력)\n");
			}
		}
		while (true) {
			String gender = In.getString(" ✔ 성별 (여자, 남자)");
			if (ConditionCheck.checkGender(gender) == false) {
				System.out.println("\n ✖ '여자' 또는 '남자'만 입력 가능 합니다. 정확히 입력 해 주세요.\n");
			} else {
				vo.setGender(gender);
				break;
			}
		}
		while (true) {
			String tel = In.getString(" ✔ 연락처 (xxx-xxxx-xxxx)");
			if (ConditionCheck.checkTel(tel) == false) {
				System.out.println("\n ✖ 연락처 형식이 맞지 않습니다. 아래와 같이 입력 해 주세요.");
				System.out.println(" ✔ 예) 010-1234-5678 ('-'을 포함하여 입력)\n");
			} else {
				vo.setTel(tel);
				break;
			}
		}
		while (true) {
			String email = In.getString(" ✔ 이메일 (nnn@nnn.nnn)");
			if (ConditionCheck.checkEmail(email) == false) {
				System.out.println("\n ✖ 이메일 형식이 맞지 않습니다. 아래와 같이 입력 해 주세요.");
				System.out.println(" ✔ 예) abc@naver.com ('@'와 '.'을 포함하여 입력)\n");
			} else {
				vo.setEmail(email);
				break;
			}
		}
		while (true) {
			String licenseNo = In.getString(" ✔ 면허번호 (xx-xx-xxxxxx-xx)");
			if (ConditionCheck.checkLicenseNo(licenseNo) == false) {
				System.out.println("\n ✖ 면허번호 형식이 맞지 않습니다. 아래와 같이 입력 해 주세요.");
				System.out.println(" ✔ 예) 12-12-123456-12 ('-'을 포함하여 입력)\n");
			} else {
				vo.setLicenseNo(licenseNo);
				break;
			}
		} // end of while licenseNo
		
		while (true) {
			String recommender = In.getString(" 선택) 추천인 아이디");
			if ((boolean)(Execute.run(new MemberIdListServiceImpl(), recommender))) {
				break;
			} else if (!ConditionCheck.checkId(recommender)) {
				System.out.println(" ✖ 입력 조건을 확인하고 다시 입력 해 주세요.");
				System.out.println(" ✔ 입력 조건 : 4~20자, 첫글자는 영문 대소문자, 영문 & 숫자만 입력 가능.\n");
			} else {
				System.out.println(" \n ✖ 입력하신 아이디에 대한 회원 정보가 존재하지 않습니다. 다시 한 번 확인 해 주세요.\n");
			}
		} // end of recommender
		

		System.out.println("\n ■ 입력하신 정보로 가입을 진행하시겠습니까?");
		switch(In.getString(" ■ 1.가입하기 2.취소하기")) {
		case "1" :
			break;
		case "2" :
			return null;
		default :
		}
		return vo;
	} // end of writeJoin
} // end of class
