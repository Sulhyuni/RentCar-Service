package com.ezenrent.notice.controller;

import java.util.List;

import com.ezenrent.main.Execute;
import com.ezenrent.main.Main;
import com.ezenrent.member.vo.LoginVO;
import com.ezenrent.notice.service.NoticeCurrentListServiceImpl;
import com.ezenrent.notice.service.NoticeDeleteServiceImpl;
import com.ezenrent.notice.service.NoticeLastListServiceImpl;
import com.ezenrent.notice.service.NoticeListServiceImpl;
import com.ezenrent.notice.service.NoticePreviewServiceImpl;
import com.ezenrent.notice.service.NoticeReservationListServiceImpl;
import com.ezenrent.notice.service.NoticeUpdateServiceImpl;
import com.ezenrent.notice.service.NoticeViewServiceImpl;
import com.ezenrent.notice.service.NoticeWriteServiceImpl;
import com.ezenrent.notice.vo.NoticeVO;
import com.ezenrent.util.io.In;
import com.ezenrent.util.io.NoticePrint;
import com.ezenrent.util.io.Out;

public class NoticeController {

	public static LoginVO login = null;
	boolean isAdmin = Main.login != null && Main.login.getGradeNo() == 9;

	public void execute() {
		while (true) {
			try {
				// 메뉴 출력
				Out.title("-", 40, "공지 사항");
				// 메뉴 입력 및 처리
				System.out.println((Main.login != null) ? "[1. 공지사항 리스트] [2.공지사항 보기] [0.이전메뉴] " : "");
				System.out.print((Main.login.getGradeNo() == 9) ? "[3. 공지 등록][4 공지 수정][5.공지 삭제]" : "");
				System.out.println();

				switch (In.getString("메뉴 입력")) {
				case "1":
					// 공지리스트
					if (isAdmin) {
						Out.line("=", 50);
						System.out.println("[1.전체공지] [2.현재공지] [3.예약공지] [4.지난공지]");
						Out.line("=", 50);
						
						
						switch (In.getString("메뉴입력")) {
						case "1":
							List<NoticeVO> result = (List<NoticeVO>) Execute.run(new NoticeListServiceImpl(), null);
							NoticePrint.print(result);
							
							break;
						case"2":
							List<NoticeVO> result2 = (List<NoticeVO>) Execute.run(new NoticeCurrentListServiceImpl(), null);
							NoticePrint.print(result2);

							break;
							
						case"3":
							List<NoticeVO> result3 = (List<NoticeVO>) Execute.run(new NoticeReservationListServiceImpl(), null);
							NoticePrint.print(result3);

							break;
						case"4":
							List<NoticeVO> result4 = (List<NoticeVO>) Execute.run(new NoticeLastListServiceImpl(), null);
							NoticePrint.print(result4);
							
							break;

						default:
							System.out.println("잘못된 메뉴를 선택하셨습니다 \n1~4번 중 선택하세요.");
							break;
						}


					} else {
						List<NoticeVO> result = (List<NoticeVO>) Execute.run(new NoticeCurrentListServiceImpl(), null);
						NoticePrint.print(result);

					}

					break;
				case "2":
					// 공지 보기

					String strNo = In.getString("어떤 글을 보시겠습니까?");
					long no = Long.parseLong(strNo);
					if (isAdmin) {
						
							NoticeVO viewVO = (NoticeVO) Execute.run(new NoticeViewServiceImpl(),
									new Object[] { no, 1 });
							NoticePrint.print(viewVO);
				
					} else {
							NoticeVO viewVO = (NoticeVO) Execute.run(new NoticePreviewServiceImpl(),
									new Object[] { no, 1 });
							NoticePrint.print(viewVO);
											}
					
					break;
				case "0":// 이전메뉴
					Out.line("-", 40);
					System.out.println("++++++++[ 이전메뉴로 돌아갑니다. ]++++++++");
					Out.line("-", 40);
					return;
				case "3":// 공지등록
					if (isAdmin) {

						NoticeVO writeVO = new NoticeVO();

						writeVO.setTitle(In.getString("공지제목"));
						writeVO.setContent(In.getString("공지내용"));
						writeVO.setStartDate(In.getString("공지시작일(yyyy-mm-dd)"));
						writeVO.setEndDate(In.getString("공지종료일(yyyy-mm-dd)"));
						// 공지사항 작성
						Integer result = (Integer) Execute.run(new NoticeWriteServiceImpl(), writeVO);
						if (result == 1) {
							System.out.println("공지사항이 정상적으로 등록되었습니다.");
						} else
							System.out.println("공지사항이 등록되지않았습니다. 다시 시도해주세요.");
						break;
					}
				case "4":// 공지 수정
					if (isAdmin) {
						// 수정할 글 번호 불러오기
						NoticeVO updateVO = new NoticeVO();
						strNo = In.getString("어떤 글을 수정하시겠습니까?");
						no = Long.parseLong(strNo);

						updateVO = (NoticeVO) Execute.run(new NoticeViewServiceImpl(), new Object[] { no, 0 });

						// 수정 서비스 따로 만들어둠
						updateVO(updateVO);

						Integer result = (Integer) Execute.run(new NoticeUpdateServiceImpl(), updateVO);
						if (result == 1) {
							System.out.println("공지사항이 정상적으로 등록되었습니다.");
						} else
							System.out.println("공지사항이 등록되지않았습니다. 다시 시도해주세요.");
						break;
					}
				case "5":// 공지 삭제
					if (isAdmin) {
						strNo = In.getString("어떤 글을 삭제하시겠습니까?");
						no = Long.parseLong(strNo);

						NoticeVO deleteVO = new NoticeVO();
						deleteVO.setNo(no);
						Integer result = (Integer) Execute.run(new NoticeDeleteServiceImpl(), deleteVO);
						if (result == 1) {
							System.out.println("공지사항이 정상적으로 삭제되었습니다.");
						} else
							System.out.println("존재하지 않는 공지사항입니다.다시 선택해주세요.");
						break;
					}
				default:
					Out.error("+", 60, "잘못된 번호를 입력하였습니다. 다시 시도해주세요.");
					break;
				}

			}

			catch (Exception e) {
				// 개발자를 위한 코드
				e.printStackTrace();
				// 사용자를 위한 코드
				Out.error("*", 40, "로그인이 필요합니다. 5번 My 메뉴 >> 1.로그인을 해주세요.");

			}
		}

	}// end of execute()

	// 수정할 서비스 만들기

	public void updateVO(NoticeVO vo) throws Exception {
		while (true) {
			Out.line("=", 50);
			System.out.println("[1.공지제목] [2.공지내용] [3.공지시작일]\n[4.공지종료일] [0.수정완료]");
			Out.line("=", 50);

			switch (In.getString("수정할곳 번호 입력하세요")) {
			case "1":
				vo.setTitle(In.getString("공지 제목"));

				break;
			case "2":
				vo.setContent(In.getString("공지 내용"));

				break;
			case "3":
				vo.setStartDate(In.getString("공지 시작일"));

				break;
			case "4":
				vo.setEndDate(In.getString("공지 종료일"));

				break;
			case "0":
				System.out.println("공지 수정이 정상적으로 완료되었습니다.");
				return;

			default:
				Out.error("+", 60, "잘못된 번호를 입력하였습니다. 다시 시도해주세요.");
				break;
			}
		}

	}// end of updateVO
}// end of NoticeController()
