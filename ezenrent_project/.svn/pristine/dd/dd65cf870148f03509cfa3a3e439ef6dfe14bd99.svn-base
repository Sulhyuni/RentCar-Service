package com.ezenrent.review.dao;

import java.util.ArrayList;
import java.util.List;

import com.ezenrent.review.vo.ReviewVO;
import com.ezenrent.util.db.DAO;
import com.ezenrent.util.db.DB;

public class ReviewDAOImpl extends DAO implements ReviewDAO {
	// 리뷰 리스트
	@Override
	public List<ReviewVO> list() throws Exception {
		List<ReviewVO> list = null;
		try {
			// 1. 확인
			con = DB.getConnection();
			System.out.println("1. 드라이버 확인 2. 연결");
			// 3. sql
			String sql = " select r.reNo, "
					+ " r.title,c.carNo, m.id,c.carModel, to_char(r.reviewdate, 'yyyy-mm-dd')reviewDate , "
					+ " r.hit , r.refNo, r.ordNo, r.levNo, r.parentNo "
					+ " from review r , member m, car c "
					+ " where (r.carNo = c.carNo) and(m.id = r.id)"
					+ " order by r.refNo desc, r.ordNo ";
			System.out.println("3. sql - " + sql);
			// 4. 실행객체 & 데이터세팅
			pstmt = con.prepareStatement(sql);
			System.out.println("4. 실행객체 & 데이터 세팅");
			// 5. 실행
			rs = pstmt.executeQuery();
			System.out.println("5. 실행");
			// 6. 데이터 저장 또는 표시
			if (rs != null) {
				while (rs.next()) {
					if (list == null)
						list = new ArrayList<>();
					ReviewVO vo = new ReviewVO();
					vo.setReNo(rs.getLong("reNo"));
					vo.setCarModel(rs.getString("carModel"));
					vo.setTitle(rs.getString("title"));
					vo.setId(rs.getString("id"));
					vo.setReviewDate(rs.getString("reviewDate"));
					vo.setHit(rs.getLong("hit"));
					vo.setLevNo(rs.getLong("levNo"));

					list.add(vo);
				} // end of while
				System.out.println("6. 데이터 저장 또는 표시");
			} // end of if
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("리뷰 리스트 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
			System.out.println("7. 닫기");
		} // end of finally
		return list;
	}// end of list
	
    // 리뷰 보기
   	@Override
	public ReviewVO view(long reNo) throws Exception {
		System.out.println("ReviewDAOImpl.view().no : " + reNo + "=======================");
		ReviewVO vo = null;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			System.out.println("1. 확인 + 2. 연결");
			// 3. sql
			String sql =" select r.reNo,c.carNo, c.carModel, c.carType, c.carFuel,"
				      + " r.title, r.content, m.id, to_char(r.reviewDate, 'yyyy-mm-dd')reviewDate, r.hit, r.refNo, r.ordNo, r.levNo "
				      + " from review r , member m , car c , rental rt "
				      + "  where ( c.carNo = r.carNo and refNo = ?)and (m.id = r.id) ";
			System.out.println("3. sql - " + sql);
			// 4. 실행객체 & 데이터세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, reNo);
			System.out.println("4. 실행객체 & 데이터세팅");
			// 5. 실행
			rs = pstmt.executeQuery();
			System.out.println("5. 실행");
			// 6. 데이터 저장 또는 표시
			if(rs != null && rs.next()) {
				vo = new ReviewVO();
				vo.setReNo(rs.getLong("reNo"));
				vo.setCarNo(rs.getLong("carNo"));
				vo.setCarModel(rs.getString("carModel"));
				vo.setCarFuel(rs.getString("carFuel"));
				vo.setCarType(rs.getString("carType"));
				vo.setTitle(rs.getString("title"));
				vo.setContent(rs.getString("content"));
				vo.setId(rs.getString("id"));
				vo.setReviewDate(rs.getString("reviewDate"));
				vo.setHit(rs.getLong("hit"));
				vo.setRefNo(rs.getLong("refNo"));
				vo.setOrdNo(rs.getLong("ordNo"));
				vo.setLevNo(rs.getLong("levNo"));
			}// end of if
			System.out.println("6. 데이터 저장 또는 표시");
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("리뷰 보기 DB 처리 중 오류가 발생되었습니다. ");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
			System.out.println("7. 닫기");
		}// end of finally
		return vo;
	}// end of view()

   	// 조회수 1증가
   	public int increase(long reNo) throws Exception{
   		System.out.println("ReviewDAOImpl.increase()======================");
   		int result = 0;
   		try {
			// 1. 확인 2. 연결
   			con = DB.getConnection();
   			System.out.println("1. 확인 + 2. 연결");
   			// 3. sql
   			String sql = " update review set hit = hit + 1 where reNo = ? "; // refNo 넣어보기
   			System.out.println("3. sql - " + sql);
   			// 4. 실행객체 & 데이터 세팅
   			pstmt = con.prepareStatement(sql);
   			pstmt.setLong(1, reNo);
   			System.out.println("4. 실행객체");
   			// 5. 실행
   			result = pstmt.executeUpdate();
   			System.out.println("5. 실행 - result : " + result );
   			// 6. 데이터 저장 또는 표시
   			if(result == 1) System.out.println("6. 데이터 저장 또는 표시 : 조회수 1 증가");
   			else throw new Exception("조회수 1증가 실패");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			throw new Exception("리뷰글 조회수 1증가 DB 처리 중 오류가 발생되었습니다.");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
			System.out.println("7. 닫기");
			}// end of try~ catch finally
		return result;
   	}// end of inrease()
   	
   	// 리뷰 등록
	@Override
	public Integer write(ReviewVO vo) throws Exception {
		System.out.println("ReviewDAOImpl.write().vo : " + vo + "=============");
		int result = 0;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			System.out.println("1. 확인 + 2. 연결");
			// 3. sql
			String sql = " insert into review(reNo, rentNo, carNo, title, content, id, refNo , ordNo, levNo, parentNo) " 	
	           + " values(review_seq.nextval, ?, ? , ? , ? , ?, review_seq.nextval, 1, 0, null )";
			System.out.println("3. sql - " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getRentNo());
			pstmt.setLong(2, vo.getCarNo());
//			pstmt.setString(1, vo.getCarModel());
//			pstmt.setString(2, vo.getCarFuel());
//			pstmt.setString(3, vo.getCarType());
			pstmt.setString(3, vo.getTitle());
			pstmt.setString(4, vo.getContent());
			pstmt.setString(5, vo.getId());
			System.out.println("4. 실행객체 & 데이터 세팅");
			// 5. 실행
			result = pstmt.executeUpdate();
			System.out.println("5. 실행 - result : " + result);
			// 6. 데이터 저장 또는 표시
			if(result == 1)
				System.out.println("6. 데이터 저장 또는 표시 - 글 등록이 되었습니다.");
			else throw new Exception("글 등록이 실패했습니다");
		}catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			throw new Exception("글등록 DB 처리 중 오류가 발생되었습니다");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
		}
		return result;
	}// end of write
    
	// 리뷰 수정
	@Override
	public Integer update(ReviewVO vo) throws Exception {
		System.out.println("ReviewDAOImpl.update().vo : " + vo + "=====================");
		Integer result = 0;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			System.out.println("1. 확인 + 2. 연결");
			// 3. sql
			String sql = " update review set title =? , content = ? "
					+ " where reNo = ? and id = ? ";
			System.out.println("3. sql - " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getTitle());
			pstmt.setString(2, vo.getContent());
			pstmt.setLong(3, vo.getReNo());
			pstmt.setString(4, vo.getId());
			System.out.println("4. 실행객체 + 데이터 세팅");
			// 5. 실행
			result = pstmt.executeUpdate();
			System.out.println("5. 실행");
			// 6. 데이터 저장 또는 표시
			if(result == 1) System.out.println("6. 데이터 저장 또는 표시 - 글이 수정되었습니다.");
			else { throw new Exception("6. 데이터 저장 또는 표시 - 선택한 글이 없거나 본인글이 아닙니다.");
			}// end of else
		}catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
	        throw new Exception("수정 작업 DB 처리 중 오류가 발생되었습니다.");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
			System.out.println("7. 닫기");
		}// end of finally
		return result;
	}// end of update
	 
	// 리뷰 삭제
	@Override
	public Integer delete(ReviewVO vo) throws Exception {
		System.out.println("ReviewDAOImpl.delete().vo : " + vo + "=============");
		Integer result = 0;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			System.out.println("1. 확인 + 2. 연결");
			// 3. sql
			String sql = " delete from review where reNo = ? and id = ? ";
            System.out.println("3. sql - " + sql);
			// 4. 실행객체 & 데이터 세팅
            pstmt = con.prepareStatement(sql);
            pstmt.setLong(1, vo.getReNo());
            pstmt.setString(2, vo.getId());
            System.out.println("4. 실행객체 & 데이터 세팅");
			// 5. 실행
            result = pstmt.executeUpdate();
            System.out.println("5. 실행 - result : " + result);
			// 6. 데이터 저장 또는 표시
            if(result == 1) System.out.println("6. 데이터 저장 또는 표시 - 글이 삭제되었습니다.");
            else { throw new Exception("6. 데이터 저장 또는 표시 - 선택한 글이 없거나 본인 글이 아닙니다.");
            }// end of else
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			throw new Exception("글 삭제 DB 처리중 오류가 발생되었습니다.");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
			System.out.println("7. 닫기");
		}// end of finally
		return result;
	}// end of delete

	// 답글 등록
	public Integer reply(ReviewVO vo)throws Exception{
		System.out.println("ReviewDAOImpl.reply().vo : " + vo + "===============");
		int result = 0;
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			System.out.println("1. 확인 + 2. 연결");
			// 3. sql
			String sql = " insert into review(reNo,carNo, title, content, id, refNo, ordNo, levNo, parentNo )"
					+ " values(review_seq.nextval,? ,? ,? ,? ,? ,?,?,?) ";
			System.out.println("3. sql - " + sql);
			// 4. 실행객체 & 데이터세팅
			pstmt = con.prepareStatement(sql);
//			pstmt.setString(3, vo.getTitle());
//			pstmt.setString(4, vo.getContent());
//			pstmt.setString(5, vo.getId());
//			pstmt.setLong(6, vo.getRefNo());
//			pstmt.setLong(7, vo.getOrdNo());
//			pstmt.setLong(8, vo.getLevNo());
//			pstmt.setLong(9, vo.getParentNo());
			pstmt.setLong(1, vo.getCarNo());
			pstmt.setString(2, vo.getTitle());
			pstmt.setString(3, vo.getContent());
			pstmt.setString(4, vo.getId());
			pstmt.setLong(5, vo.getRefNo());
			pstmt.setLong(6, vo.getOrdNo());
			pstmt.setLong(7, vo.getLevNo());
			pstmt.setLong(8, vo.getParentNo());
			System.out.println("4. 실행객체");
			// 5. 실행
			result = pstmt.executeUpdate();
			System.out.println("5. 실행 - result : " + result);
			// 6. 데이터 저장 또는 표시
			if(result == 1)System.out.println("6. 데이터 저장 또는 표시 - 답글 등록 완료");
			else throw new Exception("답글 등록 실패");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			throw new Exception("답글 등록 DB 처리 중 오류가 발생되었습니다.");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
			System.out.println("7. 닫기");
		}// end of finally
		return result;
	}// end of reply(답글)
	
	// 순서번호 1증가 시키기 (답글을 달기위한)
    public Integer ordNoIncrease(ReviewVO vo) throws Exception{
    	System.out.println("ReviewDAOImpl.ordNoIncrease().vo : " + vo + "==============");
    	int result= 0;
    	try {
    		// 1. 확인 + 2. 연결
    		con = DB.getConnection();
    		System.out.println("1. 확인 + 2. 연결");
			// 3. sql
    		String sql = " update review set ordNo = ordNo + 1 where refNo = ? and ordNo >= ? ";
    		System.out.println("3. sql - " + sql);
    		// 4. 실행객체 & 데이터 세팅
    		pstmt = con.prepareStatement(sql);
    		pstmt.setLong(1, vo.getRefNo());
    		pstmt.setLong(2, vo.getOrdNo());
    		System.out.println("4. 실행객체");
    		// 5. 실행
    		result = pstmt.executeUpdate();
    		System.out.println("5. 실행");
    		// 6. 데이터 저장 또는 표시
    		if(result == 1) System.out.println("6. 데이터 저장 또는 표시 - 순서번호 1증가");
    		else System.out.println("순서번호 1증가 실패 - 증가할 데이터가 없습니다.");
		} catch (Exception e) {
			e.printStackTrace();
		    System.out.println(e.getMessage());
			throw new Exception("답글 순서번호 DB 처리 중 오류가 발생되었습니다");
		}finally {
			// 7. 닫기
			DB.close(con, pstmt);
			System.out.println("7. 닫기");
		}
		return result;
    }
    
    // 관련번호로 답글 답변 보기
	@Override
	public List<ReviewVO> refNolist(long refNo) throws Exception {
		List<ReviewVO> refNolist = null;

		try {
			// 1. 확인
			con = DB.getConnection();
			System.out.println("1. 드라이버 확인 2. 연결");
			// 3. sql
			String sql =  " select r.reNo,c.carNo, c.carModel, c.carType, c.carFuel,"
				      + " r.title, r.content, m.id, to_char(r.reviewDate, 'yyyy-mm-dd')reviewDate, r.hit, r.refNo, r.ordNo, r.levNo "
				      + " from review r , member m , car c  "
				      + " where (r.refNo = ? and c.carno = r.carno )and (m.id = r.id) " ;
			System.out.println("3. sql - " + sql);
			// 4. 실행객체 & 데이터세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, refNo);
			System.out.println("4. 실행객체 & 데이터 세팅");
			// 5. 실행
			rs = pstmt.executeQuery();
			System.out.println("5. 실행");
			// 6. 데이터 저장 또는 표시
			if (rs != null) {
				while (rs.next()) {
					if (refNolist == null)
						refNolist = new ArrayList<>();
					ReviewVO vo = new ReviewVO();
					vo.setReNo(rs.getLong("reNo"));
					vo.setCarNo(rs.getLong("carNo"));
					vo.setCarModel(rs.getString("carModel"));
					vo.setCarFuel(rs.getString("carFuel"));
					vo.setCarType(rs.getString("carType"));
					vo.setTitle(rs.getString("title"));
					vo.setContent(rs.getString("content"));
					vo.setId(rs.getString("id"));
					vo.setReviewDate(rs.getString("reviewDate"));
					vo.setHit(rs.getLong("hit"));
					vo.setLevNo(rs.getLong("levNo"));
					refNolist.add(vo);
				} // end of while
				System.out.println("6. 데이터 저장 또는 표시");
			} // end of if
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception("리뷰 리스트 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
			System.out.println("7. 닫기");
		} // end of finally
		return refNolist;
	}// end of list 

	// 관리자 삭제
	// 리뷰 삭제
		@Override
		public Integer masterdelete(ReviewVO vo) throws Exception {
			System.out.println("ReviewDAOImpl.delete().vo : " + vo + "=============");
			Integer result = 0;
			try {
				// 1. 확인 2. 연결
				con = DB.getConnection();
				System.out.println("1. 확인 + 2. 연결");
				// 3. sql
				String sql = " delete from review where reNo = ?";
	            System.out.println("3. sql - " + sql);
				// 4. 실행객체 & 데이터 세팅
	            pstmt = con.prepareStatement(sql);
	            pstmt.setLong(1, vo.getReNo());
	            System.out.println("4. 실행객체 & 데이터 세팅");
				// 5. 실행
	            result = pstmt.executeUpdate();
	            System.out.println("5. 실행 - result : " + result);
				// 6. 데이터 저장 또는 표시
	            if(result == 1) System.out.println("6. 데이터 저장 또는 표시 - 글이 삭제되었습니다.");
	            else { throw new Exception("6. 데이터 저장 또는 표시 - 선택한 글이 없거나 본인 글이 아닙니다.");
	            }// end of else
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println(e.getMessage());
				throw new Exception("글 삭제 DB 처리중 오류가 발생되었습니다.");
			}finally {
				// 7. 닫기
				DB.close(con, pstmt);
				System.out.println("7. 닫기");
			}// end of finally
			return result;
		}// end of delete
}	